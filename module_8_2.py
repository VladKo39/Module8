''''''
'''
Домашнее задание по теме "Сложные моменты и исключения в стеке вызовов функции".
Цель: понять как работают исключения внутри функций и как обрабатываются эти исключения на практике при помощи try-except.
Задача "План перехват":

Пункты задачи:
Создайте функцию personal_sum на основе условий задачи.
Создайте функцию calculate_average на основе условий задачи.
Вызовите функцию calculate_average несколько раз, передав в неё данные разных вариаций.
Пример результата выполнения программы:
Пример выполнения программы:
print(f'Результат 1: {calculate_average("1, 2, 3")}') # Строка перебирается, но каждый символ - 
                                                        строковый тип
print(f'Результат 2: {calculate_average([1, "Строка", 3, "Ещё Строка"])}') # Учитываются только 1 и 3
print(f'Результат 3: {calculate_average(567)}') # Передана не коллекция
print(f'Результат 4: {calculate_average([42, 15, 36, 13])}') # Всё должно работать

Вывод на консоль:
Некорректный тип данных для подсчёта суммы - 1
Некорректный тип данных для подсчёта суммы - ,
Некорректный тип данных для подсчёта суммы -
Некорректный тип данных для подсчёта суммы - 2
Некорректный тип данных для подсчёта суммы - ,
Некорректный тип данных для подсчёта суммы -
Некорректный тип данных для подсчёта суммы - 3
Результат 1: 0
Некорректный тип данных для подсчёта суммы - Строка
Некорректный тип данных для подсчёта суммы - Ещё Строка
Результат 2: 2.0
В numbers записан некорректный тип данных
Результат 3: None
Результат 4: 26.5
Файл module_8_2.py и загрузите его на ваш GitHub репозиторий. В решении пришлите ссылку на него.
'''


def personal_sum(numbers):
    '''
    Должна принимать коллекцию(список) numbers.
    result - суммирование увеличением суммы чисел из списка numbers.
    Данные типа отличного от числового обработывает исключение TypeError, увеличив счётчик incorrect_data на 1.
    Функция возвращает кортеж из двух значений:result - сумма чисел, incorrect_data - кол-во некорректных данных.
    :param numbers: numbers
    :return: result, incorrect_data
    '''
    result = 0
    # Начальное значение суммы чисел 0
    incorrect_data = 0
    # Начальное значение кол-ва некорректных данных 0
    for nn in numbers:
        # проходим в цикле по списку значений
        try:
            # код, который может вызвать исключения
            result += nn
            # суммирование чисел
        except (TypeError):
            # код, который должен выполниться при возникновении исключения
            incorrect_data += 1
            # сумирование кол-ва некорректных данных
            print(f'Некорректный тип данных для подсчёта суммы -{nn}')
    itog = (result, incorrect_data)
    # кортеж для возврата
    return itog


def calculate_average(numbers):
    '''
    Функция считает среднее арифметическое - сумма всех данных делённая на их количество.
    Принимает коллекцию numbers и возвращать: среднее арифметическое всех чисел.
    Внутри для подсчёта суммы использует функцию personal_sum.
    Коллекция numbers может оказаться пустой, тогда обрабатывает
    исключением ZeroDivisionError при делении на 0 возвратом 0.
    Если в numbers записана не коллекция,а другие типы данных, например числа.
    Исключение TypeError выводя строку 'В numbers записан некорректный тип данных'.
    В таком случае функция просто вернёт None.
    :param numbers: numbers
    :return: average
    '''
    try:
        # код, который может вызвать исключения
        # деление на 0, тип данных
        itog = personal_sum(numbers)[0]
        # выбор перврого значения (result, incorrect_data)
        count_int = len(numbers)-personal_sum(numbers)[1]
        # выбор второго значения (result, incorrect_data)
        average = itog / count_int
        # среднее значение чисел
        return average
    except ZeroDivisionError:
        # код привозникновении исключения ошибка деление на 0
        return 0
    except(TypeError):
        # код привозникновении исключения ошибка типа данных.Введен не список, а число
        print(f'В numbers записан некорректный тип данных')


print(f'Результат 1: {calculate_average("1, 2, 3")}')  # Строка перебирается, но каждый символ -строковый тип
print(f'Результат 2: {calculate_average([1, "Строка", 3, "Ещё Строка"])}')  # Учитываются только 1 и 3
print(f'Результат 3: {calculate_average(567)}')  # Передана не коллекция
print(f'Результат 4: {calculate_average([42, 15, 36, 13])}')  # Всё должно работать
